// Positioning mixins.
.position(@pos: relative, @arg: @def-pos-val) when (iskeyword(@pos)) {
    @top: extract(@arg, 1);
    @rgt: extract(@arg, 2);
    @btm: extract(@arg, 3);
    @lft: extract(@arg, 4);

    position: @pos;

    & when (isnumber(@top)), (@top = auto), (isstring(@top)) {
        top: @top;
    }
    & when (isnumber(@rgt)), (@rgt = auto), (isstring(@rgt)) {
        right: @rgt;
    }
    & when (isnumber(@btm)), (@btm = auto), (isstring(@btm)) {
        bottom: @btm;
    }
    & when (isnumber(@lft)), (@lft = auto), (isstring(@lft)) {
        left: @lft;
    }
}

// Absolute Alignment.
.absolute(@arg: @def-pos-val) {
    .position(absolute, @arg);
}
.absolute-left() {
    .absolute(none none none 0);
}
.absolute-center() {
    .absolute(none none none 50%);
    .translateX-e(-50%);
}
.absolute-right() {
    .absolute(none 0);
}

.absolute-top() {
    .absolute(0);
}
.absolute-middle() {
    .absolute(50%);
    .translateY-e(-50%);
}
.absolute-bottom() {
    .absolute(none none 0);
}

// Plan to deprecated.
.absolute-center-all() {
    .absolute(50% none none 50%);
    .translate-e(-50% -50%);
}

.absolute-top-left() {
    .absolute(0 none none 0);
}
.absolute-top-center() {
    .absolute(0 none none 50%);
    .translateX-e(-50%);
}
.absolute-top-right() {
    .absolute(0 0);
}

.absolute-middle-left() {
    .absolute(50% none none 0);
    .translateY-e(-50%);
}
.absolute-middle-center() {
    .absolute(50% none none 50%);
    .translate-e(-50% -50%);
}
.absolute-middle-right() {
    .absolute(50% 0);
    .translateY-e(-50%);
}

.absolute-bottom-left() {
    .absolute(none none 0 0);
}
.absolute-bottom-center() {
    .absolute(none none 0 50%);
    .translateX-e(-50%);
}
.absolute-bottom-right() {
    .absolute(none 0 0);
}

// Relative Position.
.relative(@arg: @def-pos-val) {
    .position(relative, @arg);
}

// Fixed position.
.fixed(@arg: @def-pos-val) {
    .position(fixed, @arg);
}
