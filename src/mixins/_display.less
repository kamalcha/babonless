// Display mixins.
.display-set(@arg: @def-display-val, @size: none) when (iskeyword(@arg)) {

    display: @arg;

    & when (length(@size) = 2) {
        @wd: extract(@size, 1);
        @hg: extract(@size, 2);

        & when (isnumber(@wd)), (@wd = auto), (isstring(@wd)) {
            width: @wd;
        }
        & when (isnumber(@hg)), (@hg = auto), (isstring(@hg)) {
            height: @hg;
        }
    }
    & when (length(@size) = 1) and (isnumber(@size)), (@size = auto), (isstring(@size)) {
        width: @size;
        height: @size;
    }
}
.block(@size: none) {
    .display-set(block, @size);
}
.inline(@size: none) {
    .display-set(inline, @size);
}
.inline-block(@size: none) {
    .display-set(inline-block, @size);
    *display: inline;
    zoom: 1;
}
.table(@size: none) {
    .display-set(table, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-x(@size: none; @trans: true) {
    .table(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-row(@size: none) {
    .display-set(table-row, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-row-x(@size: none; @trans: true) {
    .table-row(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-cell(@size: none) {
    .display-set(table-cell, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-cell-x(@size: none; @trans: true) {
    .table-cell(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-caption(@size: none) {
    .display-set(table-caption, @size);
}
.table-column-group(@size: none) {
    .display-set(table-column-group, @size);
}
.table-header-group(@size: none) {
    .display-set(table-header-group, @size);
}
.table-footer-group(@size: none) {
    .display-set(table-footer-group, @size);
}
.table-row-group(@size: none) {
    .display-set(table-caption, @size);
}
.inline-table(@size: none) {
    .display-set(inline-table, @size);
}


.flex-box(@size: none) {
    .display-set(flex, @size);
}
.inline-flex(@size: none) {
    .display-set(inline-flex, @size);
}

.list-item(@size: none) {
    .display-set(list-item, @size);
}
.run-in(@size: none) {
    .display-set(run-in, @size);
}

// Visibility.
.invisible() {
    visibility: hidden;
    opacity: 0;
}
.visible() {
    visibility: visible;
    opacity: 1;
}
.hide() {
    display: none !important;
}
.show() {
    display: block !important;
}
.hidden() {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

// Sizer.
.size(@arg) when (length(@arg) >= 1) {
    @wid: extract(@arg, 1);

    & when (isnumber(@wid)), (@wid = auto), (isstring(@wid)) {
        width: @wid;
    }
    & when (length(@arg) = 1) and (isnumber(@wid)), (@wid = auto), (isstring(@wid)) {
        height: @wid;
    }
    & when (length(@arg) = 2) {
        @hgt: extract(@arg, 2);

        & when (isnumber(@hgt)), (@hgt = auto), (isstring(@hgt)) {
            height: @hgt;
        }
    }
}
.min-size(@arg) when (length(@arg) >= 1) {
    @min-width: extract(@arg, 1);
    @min-height: extract(@arg, 2);

    & when (isnumber(@min-width)), (@min-width = auto), (isstring(@min-width)) {
        min-width: @min-width;

        & when (length(@arg) = 1) {
            min-height: @min-width;
        }
    }
    & when (length(@arg) = 2) and (isnumber(@min-height)), (@min-height = auto), (isstring(@min-height)) {
        min-height: @min-height;
    }
}
.max-size(@arg) when (length(@arg) >= 1) {
    @max-width: extract(@arg, 1);
    @max-height: extract(@arg, 2);

    & when (isnumber(@max-width)), (@max-width = auto), (isstring(@max-width)) {
        max-width: @max-width;

        & when (length(@arg) = 1) {
            max-height: @max-width;
        }
    }
    & when (length(@arg) = 2) and (isnumber(@max-height)), (@max-height = auto), (isstring(@max-height)) {
        max-height: @max-height;
    }
}
