// VARIABLE COLLECTIONS.
// ----------------------------------------------

// Enable or disable responsive.
@responsive-transform   : false;

// Default Input Placeholder Color.
@def-pld-clr            : #555;

// Default border shortand size and color.
@def-brd                : 1px;
@def-bcl                : #cccccc;

// Default Display Property.
@def-display-val        : block;

// Default position value.
@def-pos-val            : none none none none;

// Long shadow config.
@def-shadow-depth       : 1;        // from 0.5 to 5.

// Default effect timing.
@def-etime              : .3s;      // Normal.
@def-etime-f            : .2s;      // Fast.
@def-etime-s            : .6s;      // Slow.

// Default Grid Option.
@def-grid-option        : 960 12 10;

// Default font-styles.
@def-font-style         : Hairline HairlineItalic Thin ThinItalic Light LightItalic Regular Italic Medium MediumItalic Semibold SemiboldItalic Bold BoldItalic 'Black' BlackItalic Heavy HeavyItalic;

// Media Queries.
@retina                 : ~"only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)";

@mobile                 : ~"only screen and (min-device-width : 320px) and (max-device-width : 767px)";
@mobile-portrait        : ~"only screen and (max-width: 509px) and (min-device-width: 1024px), (max-device-width: 480px) and (orientation: portrait)";
@mobile-landscape       : ~"only screen and (max-width: 509px) and (min-device-width: 1024px), (max-device-width: 480px) and (orientation: landscape)";

@tablet                 : ~"only screen and (min-device-width : 768px) and (max-device-width : 1024px), (min-width: 768px) and (max-width: 1200px)";
@tablet-portrait        : ~"only screen and (max-device-width: 1024px) and (min-device-width: 481px) and (orientation: portrait)";
@tablet-landscape       : ~"only screen and (max-width: 989px) and (min-device-width: 1024px), screen and (max-device-width: 480px), (max-device-width: 480px) and (orientation: landscape)";

@desktop                : ~"only screen and (min-width: 1200px)";
@desktop-mdm            : ~"only screen and (min-width: 1400px)";
@desktop-fhd            : ~"only screen and (min-width: 1800px)";
@desktop-whd            : ~"only screen and (min-width: 2500px)";
@desktop-qhd            : ~"only screen and (min-width: 3400px)";
@desktop-uhd            : ~"only screen and (min-width: 3800px)";
// Block Debugger.
.debug-block() {
    * {
        box-shadow: 0 0 0 1px red !important;
    }
}

// Hex to RGBA Converter.
.hrgba(@color, @opacity) when (iscolor(@color)) and (isnumber(@opacity)) {
    @new-color: rgba(red(@color), green(@color), blue(@color), @opacity);
}

// Commont mixins to cover missing CSS3 prefixer.
.prefixer(@name; @values; @origin: false; @mixer: false) when (iskeyword(@name)) and (length(@values) >= 1) {
    & when (@mixer = false) {
        -webkit-@{name}: @values;
           -moz-@{name}: @values;
            -ms-@{name}: @values;
             -o-@{name}: @values;

        & when (@origin = true) {
                @{name}: @values;
        }
    }
    & when (@mixer = comma) {
        -webkit-@{name}+: @values;
           -moz-@{name}+: @values;
            -ms-@{name}+: @values;
             -o-@{name}+: @values;

        & when (@origin = true) {
                @{name}+: @values;
        }
    }
    & when (@mixer = space) {
        -webkit-@{name}+_: @values;
           -moz-@{name}+_: @values;
            -ms-@{name}+_: @values;
             -o-@{name}+_: @values;

        & when (@origin = true) {
                @{name}+_: @values;
        }
    }
}

// Opacity.
.opacity(@arg) {
    .prefixer(opacity, @arg, true);
    @opc: (@arg * 100);
    filter: ~"alpha(opacity=@{opc})"
}

// Text Overflow.
.text-overflow() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}
.hyphens(@value: auto) {
    .prefixer(hyphens, @value, true);
    word-wrap: break-word;
}

// Clearfix.
.clearfix() {
    *zoom: 1;

    &:before, &:after { content: ""; display: table; }
    &:after { clear: both; }
}

// Container.
.container-box(@width; @padding: none) when (isnumber(@width)) {
    width: 100%;
    max-width: @width;
    margin: 0 auto;

    & when (length(@padding) = 1) and (isnumber(@padding)), (length(@padding) >= 2) {
        padding: @padding;
    }
}

// CSS3 Standards.
.background-clip(@value) {
    .prefixer(background-clip, @value, true);
}

.background-origin(@value) {
    .prefixer(background-origin, @value, true);
}

.background-size(@value) {
    .prefixer(background-size, @value, true);
}

.box-align(@value) {
    .prefixer(box-align, @value, true);
}

.box-direction(@value) {
    .prefixer(box-direction, @value, true);
}

.box-decoration-break(@value) {
    .prefixer(box-decoration-break, @value, true);
}

.box-flex(@value) {
    .prefixer(box-flex, @value, true);
}

.box-flex-group(@value) {
    .prefixer(box-flex-group, @value, true);
}

.box-lines(@value) {
    .prefixer(box-lines, @value, true);
}

.box-ordinal-group(@value) {
    .prefixer(box-ordinal-group, @value, true);
}

.box-orient(@value) {
    .prefixer(box-orient, @value, true);
}

.box-pack(@value) {
    .prefixer(box-pack, @value, true);
}

.break-after(@value) {
    .prefixer(break-after, @value, true);
}

.break-before(@value) {
    .prefixer(break-before, @value, true);
}

.break-inside(@value) {
    .prefixer(break-inside, @value, true);
}

.columns(@value) {
    .prefixer(columns, @value, true);
}

.column-count(@value) {
    .prefixer(column-count, @value, true);
}

.column-fill(@value) {
    .prefixer(column-fill, @value, true);
}

.column-gap(@value) {
    .prefixer(column-gap, @value, true);
}

.column-rule(@value) {
    .prefixer(column-rule, @value, true);
}

.column-rule-color(@value) {
    .prefixer(column-rule-color, @value, true);
}

.column-rule-style(@value) {
    .prefixer(column-rule-style, @value, true);
}

.column-rule-width(@value) {
    .prefixer(column-rule-width, @value, true);
}

.column-span(@value) {
    .prefixer(column-span, @value, true);
}

.column-width(@value) {
    .prefixer(column-width, @value, true);
}

.marquee-direction(@value) {
    .prefixer(marquee-direction, @value, true);
}

.marquee-play-count(@value) {
    .prefixer(marquee-play-count, @value, true);
}

.marquee-speed(@value) {
    .prefixer(marquee-speed, @value, true);
}

.marquee-style(@value) {
    .prefixer(marquee-style, @value, true);
}

.nav-index(@value) {
    .prefixer(nav-index, @value, true);
}

.nav-left(@value) {
    .prefixer(nav-left, @value, true);
}

.nav-right(@value) {
    .prefixer(nav-right, @value, true);
}

.nav-up(@value) {
    .prefixer(nav-up, @value, true);
}

.rotation(@value) {
    .prefixer(rotation, @value, true);
}

.rotation-point(@value) {
    .prefixer(rotation-point, @value, true);
}

.text-wrap(@value) {
    .prefixer(text-wrap, @value, true);
}

.grid-columns(@value) {
    .prefixer(grid-columns, @value, true);
}

.grid-rows(@value) {
    .prefixer(grid-rows, @value, true);
}

.hanging-punctuation(@value) {
    .prefixer(hanging-punctuation, @value, true);
}

.icon(@value) {
    .prefixer(icon, @value, true);
}

.punctuation-trim(@value) {
    .prefixer(punctuation-trim, @value, true);
}

.resize(@value) {
    .prefixer(resize, @value, true);
}

.filter(@value) {
    .prefixer(filter, @value, true);
}

.text-size-adjust(@value) {
    .prefixer(text-size-adjust, @value, true);
}

.clip-path(@value) {
    .prefixer(clip-path, @value, true);
}

.target(@value) {
    .prefixer(target, @value, true);
}

.target-name(@value) {
    .prefixer(target-name, @value, true);
}

.target-new(@value) {
    .prefixer(target-new, @value, true);
}

.target-position(@value) {
    .prefixer(target-position, @value, true);
}

.word-break(@value) {
    .prefixer(word-break, @value, true);
}

.word-wrap(@value) {
    .prefixer(word-wrap, @value, true);
}

// Appearance.
.appearance(@arg) {
    .prefixer(appearance, @arg, true);
}

// Box Sizing.
.box-sizing(@arg) {
    .prefixer(box-sizing, @arg, true);
}

// Backface Visibility.
.backface-visibility(@arg) {
    .prefixer(backface-visibility, @arg, true);
}

// User select.
.user-select(@arg) {
    .prefixer(user-select, @arg, true);
}


// Animation Mixins.
.animation(@arg) {
    .prefixer(animation, @arg, true);
}
.animation-name(@arg) {
    .prefixer(animation-name, @arg, true);
}
.animation-duration(@arg) {
    .prefixer(animation-duration, @arg, true);
}
.animation-timing-function(@arg) {
    .prefixer(animation-timing-function, @arg, true);
}
.animation-delay(@arg) {
    .prefixer(animation-delay, @arg, true);
}
.animation-iteration-count(@arg) {
    .prefixer(animation-iteration-count, @arg, true);
}
.animation-direction(@arg) {
    .prefixer(animation-direction, @arg, true);
}
.animation-fill-mode(@arg) {
    .prefixer(animation-fill-mode, @arg, true);
}
.animation-play-state(@arg) {
    .prefixer(animation-play-state, @arg, true);
}

// Transition.
.transition(@value) {
    .prefixer(transition, @value, true);
}
.transition-e(@value) {
    .prefixer(transition, @value, true, comma);
}
.transition-property(@value;) {
    .prefixer(transition-property, @value, true);
}
.transition-duration(@value;) {
    .prefixer(transition-duration, @value, true);
}
.transition-timing-function(@value;) {
    .prefixer(transition-timing-function, @value, true);
}
.transition-delay(@value;) {
    .prefixer(transition-delay, @value, true);
}

// Prebuilt Transitions.
.public-effect() {
    .transition(all @def-etime ease-in-out);
}
.public-effect-fast() {
    .transition(all @def-etime-f ease-in-out);
}
.public-effect-slow() {
    .transition(all @def-etime-s ease-in-out);
}

// Border shorthand.
.border(@arg: @def-brd @def-brd @def-brd @def-brd solid @def-bcl) {
    & when (length(@arg) = 4) {
        @top: extract(@arg, 1);
        @btm: extract(@arg, 1);
        @rgt: extract(@arg, 2);
        @lft: extract(@arg, 2);

        @typ: extract(@arg, 3);
        @clr: extract(@arg, 4);

        & when (isnumber(@top)) {
            border-top: @top @typ @clr;
        }
        & when (isnumber(@rgt)) {
            border-right: @rgt @typ @clr;
        }
        & when (isnumber(@btm)) {
            border-bottom: @btm @typ @clr;
        }
        & when (isnumber(@lft)) {
            border-left: @lft @typ @clr;
        }
    }
    & when (length(@arg) = 5) {
        @top: extract(@arg, 1);
        @rgt: extract(@arg, 2);
        @btm: extract(@arg, 3);

        @typ: extract(@arg, 4);
        @clr: extract(@arg, 5);

        & when (isnumber(@top)) {
            border-top: @top @typ @clr;
        }
        & when (isnumber(@rgt)) {
            border-right: @rgt @typ @clr;
        }
        & when (isnumber(@btm)) {
            border-bottom: @btm @typ @clr;
        }
    }
    & when (length(@arg) = 6) {
        @top: extract(@arg, 1);
        @rgt: extract(@arg, 2);
        @btm: extract(@arg, 3);
        @lft: extract(@arg, 4);

        @typ: extract(@arg, 5);
        @clr: extract(@arg, 6);

        & when (isnumber(@top)) {
            border-top: @top @typ @clr;
        }
        & when (isnumber(@rgt)) {
            border-right: @rgt @typ @clr;
        }
        & when (isnumber(@btm)) {
            border-bottom: @btm @typ @clr;
        }
        & when (isnumber(@lft)) {
            border-left: @lft @typ @clr;
        }
    }
}

.border-radius(@value;) when (length(@value) >= 1) {
    .prefixer(border-radius, @value, true);
}
.border-top-left-radius(@value;) {
    .prefixer(border-top-left-radius, @value, true);
}
.border-top-right-radius(@value;) {
    .prefixer(border-top-right-radius, @value, true);
}
.border-bottom-left-radius(@value;) {
    .prefixer(border-bottom-left-radius, @value, true);
}
.border-bottom-right-radius(@value;) {
    .prefixer(border-bottom-right-radius, @value, true);
}

.border-image(@value;) {
    .prefixer(border-image, @value, true);
}
.border-image-outset(@value;) {
    .prefixer(border-image-outset, @value, true);
}
.border-image-repeat(@value;) {
    .prefixer(border-image-repeat, @value, true);
}
.border-image-slice(@value;) {
    .prefixer(border-image-slice, @value, true);
}
.border-image-source(@value;) {
    .prefixer(border-image-source, @value, true);
}
.border-image-width(@value;) {
    .prefixer(border-image-width, @value, true);
}

.border-top-radius(@value) {
    .border-top-left-radius(@value);
    .border-top-right-radius(@value);
}
.border-right-radius(@value) {
    .border-top-right-radius(@value);
    .border-bottom-right-radius(@value);
}
.border-bottom-radius(@value) {
    .border-bottom-left-radius(@value);
    .border-bottom-right-radius(@value);
}
.border-left-radius(@value) {
    .border-top-left-radius(@value);
    .border-bottom-left-radius(@value);
}
.border-upright-radius(@value) {
    .border-top-right-radius(@value);
    .border-bottom-left-radius(@value);
}
.border-upleft-radius(@value) {
    .border-top-left-radius(@value);
    .border-bottom-right-radius(@value);
}

// Browser Customization Mixins.

// Input Placeholder.
.input-placeholder(@arg: @def-pld-clr; @font: none) {
    &::-webkit-input-placeholder {
        color: @arg;

        & when (length(@font) >= 2) {
            font-size: extract(@font, 1);
            font-family: extract(@font, 2);
        }
        & when (length(@font) = 3) {
            line-height: extract(@font, 3);
        }
    }
    &::-moz-placeholder {
        color: @arg;
        .opacity(1);

        & when (length(@font) >= 2) {
            font-size: extract(@font, 1);
            font-family: extract(@font, 2);
        }
        & when (length(@font) = 3) {
            line-height: extract(@font, 3);
        }
    }
    &::-ms-input-placeholder {
        color: @arg;

        & when (length(@font) >= 2) {
            font-size: extract(@font, 1);
            font-family: extract(@font, 2);
        }
        & when (length(@font) = 3) {
            line-height: extract(@font, 3);
        }
    }
    &::-o-input-placeholder {
        color: @arg;

        & when (length(@font) >= 2) {
            font-size: extract(@font, 1);
            font-family: extract(@font, 2);
        }
        & when (length(@font) = 3) {
            line-height: extract(@font, 3);
        }
    }
}

// Selection.
.selection-color(@arg) {
    & when (length(@arg) = 1) {
        &::selection {
            color: @arg;
        }
        &::-moz-selection {
            color: @arg;
        }
    }
    & when (length(@arg) = 2) {
        &::selection {
            color: extract(@arg, 1);
            background-color: extract(@arg, 2);
        }
        &::-moz-selection {
            color: extract(@arg, 1);
            background-color: extract(@arg, 2);
        }
    }
}

// Mozilla Inner Focus Border.
.inner-focus-border(@arg) {
    &::-moz-focus-inner {
        border: @arg;
    }
}

// Display mixins.
.display-set(@arg: @def-display-val, @size: none) when (iskeyword(@arg)) {

    display: @arg;

    & when (length(@size) = 2) {
        @wd: extract(@size, 1);
        @hg: extract(@size, 2);

        & when (isnumber(@wd)), (@wd = auto) {
            width: @wd;
        }
        & when (isnumber(@hg)), (@hg = auto) {
            height: @hg;
        }
    }
    & when (length(@size) = 1) and (isnumber(@size)), (@size = auto) {
        width: @size;
        height: @size;
    }
}
.block(@size: none) {
    .display-set(block, @size);
}
.inline(@size: none) {
    .display-set(inline, @size);
}
.inline-block(@size: none) {
    .display-set(inline-block, @size);
    *display: inline;
    zoom: 1;
}
.table(@size: none) {
    .display-set(table, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-x(@size: none; @trans: true) {
    .table(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-row(@size: none) {
    .display-set(table-row, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-row-x(@size: none; @trans: true) {
    .table-row(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-cell(@size: none) {
    .display-set(table-cell, @size);

    & when (@responsive-transform = true) {
        @media @mobile {
            .display-set(block, @size);
        }
    }
}
.table-cell-x(@size: none; @trans: true) {
    .table-cell(@size);

    & when (@trans = true) {
        @media @mobile {
            .block(@size);
        }
    }
}
.table-caption(@size: none) {
    .display-set(table-caption, @size);
}
.table-column-group(@size: none) {
    .display-set(table-column-group, @size);
}
.table-header-group(@size: none) {
    .display-set(table-header-group, @size);
}
.table-footer-group(@size: none) {
    .display-set(table-footer-group, @size);
}
.table-row-group(@size: none) {
    .display-set(table-caption, @size);
}
.inline-table(@size: none) {
    .display-set(inline-table, @size);
}


.flex-box(@size: none) {
    .display-set(flex, @size);
}
.inline-flex(@size: none) {
    .display-set(inline-flex, @size);
}

.list-item(@size: none) {
    .display-set(list-item, @size);
}
.run-in(@size: none) {
    .display-set(run-in, @size);
}

// Visibility.
.invisible() {
    visibility: hidden;
    opacity: 0;
}
.visible() {
    visibility: visible;
    opacity: 1;
}
.hide() {
    display: none !important;
}
.show() {
    display: block !important;
}
.hidden() {
    display: none !important;
    visibility: hidden !important;
    opacity: 0 !important;
}

// Sizer.
.size(@arg) when (length(@arg) >= 1) {
    @wid: extract(@arg, 1);

    & when (isnumber(@wid)), (@wid = auto) {
        width: @wid;
    }
    & when (length(@arg) = 1) and (isnumber(@wid)), (@wid = auto) {
        height: @wid;
    }
    & when (length(@arg) = 2) {
        @hgt: extract(@arg, 2);

        & when (isnumber(@hgt)), (@hgt = auto) {
            height: @hgt;
        }
    }
}
.min-size(@arg) when (length(@arg) >= 1) {
    @min-width: extract(@arg, 1);
    @min-height: extract(@arg, 2);

    & when (isnumber(@min-width)), (@min-width = auto) {
        min-width: @min-width;

        & when (length(@arg) = 1) {
            min-height: @min-width;
        }
    }
    & when (length(@arg) = 2) and (isnumber(@min-height)), (@min-height = auto) {
        min-height: @min-height;
    }
}
.max-size(@arg) when (length(@arg) >= 1) {
    @max-width: extract(@arg, 1);
    @max-height: extract(@arg, 2);

    & when (isnumber(@max-width)), (@max-width = auto) {
        max-width: @max-width;

        & when (length(@arg) = 1) {
            max-height: @max-width;
        }
    }
    & when (length(@arg) = 2) and (isnumber(@max-height)), (@max-height = auto) {
        max-height: @max-height;
    }
}

// Font Face Generator.
.font-family(@arg) when (length(@arg) >= 2) {
    @name: extract(@arg, 1);
    @path: extract(@arg, 2);

    @font-face {
        font-family: "@{name}";
        src: local("@{name}");

        src: url("@{path}.eot");
        src: url("@{path}.eot#iefix") format("embedded-opentype"),
             url("@{path}.svg") format("svg"),
             url("@{path}.ttf") format("truetype"),
             url("@{path}.woff") format("woff");

        font-weight: 400;
        font-style: normal;
        font-streetch: normal;

        & when (length(@arg) = 3) {
            font-weight: extract(@arg, 3);
        }
        & when (length(@arg) = 4) {
            font-style: extract(@arg, 4);
        }
    }
}
// Batch Font Face Generator.
.font-faces(@arg; @styles: @def-font-style; @i: 1) when (@i <= length(@styles)) {
    @name: extract(@arg, 1);
    @path: extract(@arg, 2);
    @curn: extract(@styles, @i);
    @new: ~"@{path}/@{name}-@{curn}";

    .font-family(~'@{name} @{curn}' @new);
    .font-faces(@arg, @styles, (@i + 1));
}

// Font Smoothing.
.font-smoothing() {
    speak: none;
    font-variant: normal;

    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}
// Gradient Mapper.
.multi-gradient(@linear: none; @radial: none) {
    & when (isstring(@linear)) and (isstring(@radial)), (length(@radial) >= 2) and (length(@linear) >= 3) {
        background-image: -webkit-linear-gradient(~"@{linear}"), -webkit-radial-gradient(~"@{radial}");
        background-image: -moz-linear-gradient(~"@{linear}"), -moz-radial-gradient(~"@{radial}");
        background-image: -ms-linear-gradient(~"@{linear}"), -ms-radial-gradient(~"@{radial}");
        background-image: -o-linear-gradient(~"@{linear}"), -o-radial-gradient(~"@{radial}");
    }
    & when (isstring(@linear)), (length(@linear) >= 3) and (@radial = none) {
        background-image: -webkit-linear-gradient(~"@{linear}");
        background-image: -moz-linear-gradient(~"@{linear}");
        background-image: -ms-linear-gradient(~"@{linear}");
        background-image: -o-linear-gradient(~"@{linear}");
    }
    & when (isstring(@radial)), (length(@radial) >= 2) and  (@linear = none) {
        background-image: -webkit-radial-gradient(~"@{radial}");
        background-image: -moz-radial-gradient(~"@{radial}");
        background-image: -ms-radial-gradient(~"@{radial}");
        background-image: -o-radial-gradient(~"@{radial}");
    }
}
.babon-multi-gradient(@type; @gradient; @i: 1; @wval: ""; @zval: ""; @oval: ""; @mval: "") when (length(@gradient) >= @i) {
    @gval: extract(@gradient, @i);
    @blnk:",";

    & when (@i < length(@gradient)) {
        @nwval:~"@{wval}" ~"-webkit-@{type}-gradient(@{gval})" ~"@{blnk}";
        @nzval:~"@{zval}" ~"-moz-@{type}-gradient(@{gval})" ~"@{blnk}";
        @nmval:~"@{mval}" ~"-ms-@{type}-gradient(@{gval})" ~"@{blnk}";
        @noval:~"@{oval}" ~"-o-@{type}-gradient(@{gval})" ~"@{blnk}";

        .babon-multi-gradient(@type, @gradient, (@i + 1), @nwval, @nzval, @noval, @nmval);
    }
    & when (@i = length(@gradient)) {
        @nwval:~"@{wval}" ~"-webkit-@{type}-gradient(@{gval})";
        @nzval:~"@{zval}" ~"-moz-@{type}-gradient(@{gval})";
        @nmval:~"@{mval}" ~"-ms-@{type}-gradient(@{gval})";
        @noval:~"@{oval}" ~"-o-@{type}-gradient(@{gval})";

        background-image:@nwval;
        background-image:@nzval;
        background-image:@nmval;
        background-image:@noval;
    }
}

.babon-gradient-value-compile(@type; @value; @gradient; @x; @wval; @zval; @oval; @mval; @i: 2; @def: "") when (length(@value) >= @i) {
    @vl: extract(@value, @i);
    @bk: ",";

    & when (@i < length(@value)) {
        @nv:~"@{def}" @vl ~"@{bk}";

        .babon-gradient-value-compile(@type, @value, @gradient, @x, @wval, @zval, @oval, @mval, (@i + 1), @nv);
    }
    & when (@i = length(@value)) {
        @nv:~"@{def}"@vl;

        @nwval:~"@{wval}" ~"-webkit-@{type}-gradient(@{nv} )";
        @nzval:~"@{zval}" ~"-moz-@{type}-gradient(@{nv} )";
        @nmval:~"@{mval}" ~"-ms-@{type}-gradient(@{nv} )";
        @noval:~"@{oval}" ~"-o-@{type}-gradient(@{nv} )";

        .babon-gradient-generator(@gradient, @x, @nwval, @nzval, @noval, @nmval);
    }
}

.babon-gradient-value-extract(@value; @gradient; @x; @wval; @zval; @oval; @mval) when(length(@value) >= 2) {
    @type: extract(@value, 1);

    .babon-gradient-value-compile(@type, @value, @gradient, @x, @wval, @zval, @oval, @mval);
}

.babon-gradient-generator(@gradient; @i: 1; @wval: ""; @zval: ""; @oval: ""; @mval: "") {
    @blnk: ",";

    & when (@i = 1) and (length(@gradient) > 1) {
        @gval: extract(@gradient, @i);

        .babon-gradient-value-extract(@gval, @gradient, (@i + 1), @wval, @zval, @oval, @mval);
    }
    & when (@i > 1) and (@i <= length(@gradient)) {
        @gval: extract(@gradient, @i);

        @nwval:~"@{wval}"~"@{blnk}";
        @nzval:~"@{zval}"~"@{blnk}";
        @nmval:~"@{mval}"~"@{blnk}";
        @noval:~"@{oval}"~"@{blnk}";

        .babon-gradient-value-extract(@gval, @gradient, (@i + 1), @nwval, @nzval, @noval, @nmval);
    }
    & when (@i > length(@gradient)) {
        background-image:@wval;
        background-image:@zval;
        background-image:@mval;
        background-image:@oval;
    }
}

.gradients(@values) {
    .babon-gradient-generator(@values);
}
.linear-gradient(@val) {
    .multi-gradient(@val, none);
}
.linear-gradients(@val) {
    .babon-multi-gradient(linear, @val);
}
.radial-gradient(@val) {
    .multi-gradient(none, @val);
}
.radial-gradients(@val) {
    .babon-multi-gradient(radial, @val);
}

// Grid container generator.
.grid-box(@option: @def-grid-option) when (length(@option) = 3) {
    @width: extract(@option, 1);
    @colum: extract(@option, 2);
    @guter: extract(@option, 3);

    @gutter-size: ((@guter / @width) * 100);
    @column-size: ((100 / @colum) - @gutter-size);
    @common-size: @width;

    width: unit(100 + @gutter-size, %);
    margin-left: unit(-@gutter-size, %);
    .clearfix;
}

// Grid column generator.
.grid-col(@column; @option: @def-grid-option) when (isnumber(@column)) and (length(@option) = 3) {
    @width: extract(@option, 1);
    @colum: extract(@option, 2);
    @guter: extract(@option, 3);

    @gutter-size: ((@guter / @width) * 100);
    @column-size: ((100 / @colum) - @gutter-size);
    @common-size: @width;

    width: unit((@column-size * @column) + (@gutter-size * (@column - 1)), %);
    margin-left: unit(@gutter-size, %);
    float: left;
}
// Grid prefix generator.
.grid-pre(@column; @option: @def-grid-option) when (isnumber(@column)) and (length(@option) = 3) {
    @width: extract(@option, 1);
    @colum: extract(@option, 2);
    @guter: extract(@option, 3);

    @gutter-size: ((@guter / @width) * 100);
    @column-size: ((100 / @colum) - @gutter-size);
    @common-size: @width;

    padding-left: unit((@column-size * @column) + (@gutter-size * (@column - 1)), %);
}
.grid-suf(@column; @option: @def-grid-option) when (isnumber(@column)) and (length(@option) = 3) {
    @width: extract(@option, 1);
    @colum: extract(@option, 2);
    @guter: extract(@option, 3);

    @gutter-size: ((@guter / @width) * 100);
    @column-size: ((100 / @colum) - @gutter-size);
    @common-size: @width;

    padding-right: unit((@column-size * @column) + (@gutter-size * (@column - 1)), %);
}

// Positioning mixins.
.position(@pos: relative, @arg: @def-pos-val) when (iskeyword(@pos)) {
    @top: extract(@arg, 1);
    @rgt: extract(@arg, 2);
    @btm: extract(@arg, 3);
    @lft: extract(@arg, 4);

    position: @pos;

    & when (isnumber(@top)), (@top = auto) {
        top: @top;
    }
    & when (isnumber(@rgt)), (@rgt = auto) {
        right: @rgt;
    }
    & when (isnumber(@btm)), (@btm = auto) {
        bottom: @btm;
    }
    & when (isnumber(@lft)), (@lft = auto) {
        left: @lft;
    }
}

// Absolute Alignment.
.absolute(@arg: @def-pos-val) {
    .position(absolute, @arg);
}
.absolute-left() {
    .absolute(none none none 0);
}
.absolute-center() {
    .absolute(none none none 50%);
    .translateX-e(-50%);
}
.absolute-right() {
    .absolute(none 0);
}

.absolute-top() {
    .absolute(0);
}
.absolute-middle() {
    .absolute(50%);
    .translateY-e(-50%);
}
.absolute-bottom() {
    .absolute(none none 0);
}

// Plan to deprecated.
.absolute-center-all() {
    .absolute(50% none none 50%);
    .translate-e(-50% -50%);
}

.absolute-top-left() {
    .absolute(0 none none 0);
}
.absolute-top-center() {
    .absolute(0 none none 50%);
    .translateX-e(-50%);
}
.absolute-top-right() {
    .absolute(0 0);
}

.absolute-middle-left() {
    .absolute(50% none none 0);
    .translateY-e(-50%);
}
.absolute-middle-center() {
    .absolute(50% none none 50%);
    .translate-e(-50% -50%);
}
.absolute-middle-right() {
    .absolute(50% 0);
    .translateY-e(-50%);
}

.absolute-bottom-left() {
    .absolute(none none 0 0);
}
.absolute-bottom-center() {
    .absolute(none none 0 50%);
    .translateX-e(-50%);
}
.absolute-bottom-right() {
    .absolute(none 0 0);
}

// Relative Position.
.relative(@arg: @def-pos-val) {
    .position(relative, @arg);
}

// Fixed position.
.fixed(@arg: @def-pos-val) {
    .position(fixed, @arg);
}

// Box Shadow.
.box-shadow(@arg) {
    .prefixer(box-shadow, @arg, true);
}
// Merge Box Shadow.
.box-shadow-e(@arg) {
    .prefixer(box-shadow, @arg, true, comma);
}
// Merge Text Shadow.
.text-shadow(@arg) {
    .prefixer(text-shadow, @arg, true);
}
.text-shadow-e(@arg) {
    .prefixer(text-shadow, @arg, true, comma);
}

// Drop shadow.
.drop-shadow(@arg) {
    .box-shadow(@arg);
}
.drop-shadow-e(@arg) {
    .box-shadow-e(@arg);
}

// Inner Shadow.
.inner-shadow(@arg) {
    .box-shadow(inset @arg);
}
.inner-shadow-e(@arg) {
    .box-shadow-e(inset @arg);
}

// Long Shadow.
// .long-drop-shadow(up-right 30 #ccc blur);
.babon-gen-long-shadow(@dir, @type, @size, @arg) {
    & when (@type = drop-shadow) {
        & when (@dir = up) {
            .drop-shadow-e(0 unit(-@size, px) @arg);
        }
        & when (@dir = down) {
            .drop-shadow-e(0 unit(@size, px) @arg);
        }
        & when (@dir = right) {
            .drop-shadow-e(unit(@size, px) 0 @arg);
        }
        & when (@dir = left) {
            .drop-shadow-e(unit(-@size, px) 0 @arg);
        }
        & when (@dir = up-left) {
            .drop-shadow-e(unit(-@size, px) unit(-@size, px) @arg);
        }
        & when (@dir = up-right) {
            .drop-shadow-e(unit(@size, px) unit(-@size, px) @arg);
        }
        & when (@dir = down-left) {
            .drop-shadow-e(unit(-@size, px) unit(@size, px) @arg);
        }
        & when (@dir = down-right) {
            .drop-shadow-e(unit(@size, px) unit(@size, px) @arg);
        }
    }
    & when (@type = text-shadow) {
        & when (@dir = up) {
            .text-shadow-e(0 unit(-@size, px) @arg);
        }
        & when (@dir = down) {
            .text-shadow-e(0 unit(@size, px) @arg);
        }
        & when (@dir = right) {
            .text-shadow-e(unit(@size, px) 0 @arg);
        }
        & when (@dir = left) {
            .text-shadow-e(unit(-@size, px) 0 @arg);
        }
        & when (@dir = up-left) {
            .text-shadow-e(unit(-@size, px) unit(-@size, px) @arg);
        }
        & when (@dir = up-right) {
            .text-shadow-e(unit(@size, px) unit(-@size, px) @arg);
        }
        & when (@dir = down-left) {
            .text-shadow-e(unit(-@size, px) unit(@size, px) @arg);
        }
        & when (@dir = down-right) {
            .text-shadow-e(unit(@size, px) unit(@size, px) @arg);
        }
    }
}
.babon-long-shadow(@option: none; @depth; @type: drop-shadow; @current: 1; @allwd: 0) when (length(@option) >= 4) {
    @direc: extract(@option, 1);
    @width: extract(@option, 2);
    @color: extract(@option, 3);
    @style: extract(@option, 4);

    & when (@current <= @width) and (@style = blur) and (@allwd = 0) {
        @allwd: @width;

        .hrgba(@color, (@depth / @current));
        .babon-gen-long-shadow(@direc, @type, @current, @new-color);
        .babon-long-shadow(@direc @width @color @style, @depth, @type, (@current + 1), @allwd);
    }
    & when (@current <= @width) and (@style = blur) and (@allwd > 0) {
        .hrgba(@color, (@depth / @current));
        .babon-gen-long-shadow(@direc, @type, @current, @new-color);
        .babon-long-shadow(@direc @width @color @style, @depth, @type, (@current + 1), @allwd);
    }
    & when (@current <= @width) and (@style = flat) {
        .babon-gen-long-shadow(@direc, @type, @current, @color);
        .babon-long-shadow(@direc @width @color @style, @depth, @type, (@current + 1));
    }
}

.long-drop-shadow(@option, @shadow-depth: @def-shadow-depth) when (length(@option) >= 4) {
    .babon-long-shadow(@option, @shadow-depth, drop-shadow);
}
.long-text-shadow(@option, @shadow-depth: @def-shadow-depth) when (length(@option) >= 4) {
    .babon-long-shadow(@option, @shadow-depth, text-shadow);
}

// Triangle Generator.
.triangle(@arg) when (length(@arg) >= 3) {
    @sizes: extract(@arg, 1);
    @color: extract(@arg, 2);
    @direc: extract(@arg, 3);
    @rotat: extract(@arg, 4);

    .inline-block(0 0);
    border: unit(@sizes, px) solid @color;

    & when (@direc = up) {
        border-bottom-color: transparent;
        border-right-color: transparent;
        border-left-color: transparent;
    }
    & when (@direc = down) {
        border-top-color: transparent;
        border-right-color: transparent;
        border-left-color: transparent;
    }
    & when (@direc = left) {
        border-bottom-color: transparent;
        border-right-color: transparent;
        border-top-color: transparent;
    }

    & when (@direc = right) {
        border-bottom-color: transparent;
        border-left-color: transparent;
        border-top-color: transparent;
    }

    & when (length(@arg) = 4) {
        .rotate-e(@rotat);
    }
}

// Circle Generator.
.circle(@arg) when (length(@arg) >= 1) {
    @wid: extract(@arg, 1);

    .size(@wid);
    .border-radius(50%);

    & when (length(@arg) = 2) {
        background-color: extract(@arg, 2);
    }
}

// Oval Generator.
.oval(@arg) when (length(@arg) >= 3) {
    @wid: extract(@arg, 1);
    @hgt: extract(@arg, 2);
    @clr: extract(@arg, 3);

    & when (isnumber(@wid)) and (isnumber(@hgt)) and (iscolor(@clr)) {
        .size(@wid @hgt);
        .border-radius(50% / 50%);

        background-color: @clr;

        & when (length(@arg) = 4) {
            .rotate-e(extract(@arg, 4));
        }
    }
}

// Transform.
.transform(@arg) {
    .prefixer(transform; @arg; true);
}
.transform-e(@arg) {
    .prefixer(transform, @arg, true, space);
}
.transform-origin(@arg) {
    .prefixer(transform-origin, @arg, true);
}
.transform-style(@value;) {
    .prefixer(transform-style, @arg, true);
}

// Overwrite Translate.
// Usage: .translate(x y z);
.translate(@arg) {
    & when (length(@arg) = 2) {
        .transform(translate(extract(@arg, 1), extract(@arg, 2)));
    }
    & when (length(@arg) = 3) {
        .transform(translate3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3)));
    }
}
.translateX(@arg) {
    .transform(translateX(@arg));
}
.translateY(@arg) {
    .transform(translateY(@arg));
}
.translateZ(@arg) {
    .transform(translateZ(@arg));
}

// Merge translate.
// Usage: .translate-e(x y z)
.translate-e(@arg) {
    & when (length(@arg) = 2) {
        .transform-e(translate(extract(@arg, 1), extract(@arg, 2)));
    }
    & when (length(@arg) = 3) {
        .transform-e(translate3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3)));
    }
}
.translateX-e(@arg) {
    .transform-e(translateX(@arg));
}
.translateY-e(@arg) {
    .transform-e(translateY(@arg));
}
.translateZ-e(@arg) {
    .transform-e(translateZ(@arg));
}

// Overwrite Rotation.
// Usage: .rotate(deg) or .rotate(x y z deg).
.rotate(@arg) {
    & when (length(@arg) = 1) {
        .transform(rotate(@arg));
    }
    & when (length(@arg) = 4) {
        .transform(rotate3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3), extract(@arg, 4)));
    }
}
.rotateX(@arg) {
    .transform(rotateX(@arg));
}
.rotateY(@arg) {
    .transform(rotateY(@arg));
}
.rotateZ(@arg) {
    .transform(rotateZ(@arg));
}

// Merge rotate.
// Usage: .rotate-e(deg) or .rotate-e(x y z deg).
.rotate-e(@arg) {
    & when (length(@arg) = 1) {
        .transform-e(rotate(@arg));
    }
    & when (length(@arg) = 4) {
        .transform-e(rotate3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3), extract(@arg, 4)));
    }
}
.rotateX-e(@arg) {
    .transform-e(rotateX(@arg));
}
.rotateY-e(@arg) {
    .transform-e(rotateY(@arg));
}
.rotateZ-e(@arg) {
    .transform-e(rotateZ(@arg));
}

// Scale
// Usage: .scale(x y z);
.scale(@arg) {
    & when (length(@arg) = 1) {
        .transform(scale(@arg));
    }
    & when (length(@arg) = 2) {
        .transform(scale(extract(@arg, 1), extract(@arg, 2)));
    }
    & when (length(@arg) = 3) {
        .transform(scale3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3)));
    }
}
.scaleX(@arg) {
    .transform(scaleX(@arg));
}
.scaleY(@arg) {
    .transform(scaleY(@arg));
}
.scaleZ(@arg) {
    .transform(scaleZ(@arg));
}

.scale-e(@arg) {
    & when (length(@arg) = 1) {
        .transform-e(scale(@arg));
    }
    & when (length(@arg) = 2) {
        .transform-e(scale(extract(@arg, 1), extract(@arg, 2)));
    }
    & when (length(@arg) = 3) {
        .transform-e(scale3d(extract(@arg, 1), extract(@arg, 2), extract(@arg, 3)));
    }
}
.scaleX-e(@arg) {
    .transform-e(scaleX(@arg));
}
.scaleY-e(@arg) {
    .transform-e(scaleY(@arg));
}
.scaleZ-e(@arg) {
    .transform-e(scaleZ(@arg));
}

// Skew.
// Usage: .skew(x y);
.skew(@arg) {
    & when (length(@arg) = 2) {
        .transform(skew(extract(@arg, 1), extract(@arg, 2)));
    }
}
.skewX(@arg) {
    .transform(skewX(@arg));
}
.skewY(@arg) {
    .transform(skewY(@arg));
}

// Merge Skew.
.skew-e(@arg) {
    & when (length(@arg) = 2) {
        .transform-e(skew(extract(@arg, 1), extract(@arg, 2)));
    }
}
.skewX-e(@arg) {
    .transform-e(skewX(@arg));
}
.skewY-e(@arg) {
    .transform-e(skewY(@arg));
}

// Perspective
.perspective(@arg) {
    .prefixer(perspective, @arg, true);
}
.perspective-origin(@arg) {
    .prefixer(perspective-origin, @arg, true);
}
.normalize() {
    /*
     * ADAPTING BOILERPLATE.CSS
     * ---------------------------------------------------------------------------
     * HTML5 ✰ Boilerplate
     *
     * What follows is the result of much research on cross-browser styling.
     * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
     * Kroc Camen, and the H5BP dev community and team.
     *
     * Detailed information about this CSS: h5bp.com/css
     *
     * normalize -----------------------------------------------------------------
     */

    html {
        font-size: 100%;
        height: 100%;
        overflow-y: auto;

        .text-size-adjust(100%);
    }

    body {
        font-size: 100%;
        line-height: 1.231;
        position: relative;
    }

    article,
    aside,
    details,
    figcaption,
    footer,
    header,
    hgroup,
    nav,
    section,
    figure {
        display: block;
    }

    figure {
        margin: 0;
    }

    ::selection {
        background-color: #cbcbcb;

        .text-shadow(none);
    }

    ::-moz-selection {
        background-color: #cbcbcb;

        .text-shadow(none);
    }

    abbr[title] {
        border-bottom: 1px dotted;
    }

    b {
        font-weight: bold;
    }

    strong {
        font-weight: bold;
    }

    blockquote {
        margin: 1em 40px;
    }

    dfn {
        font-style: italic;
    }

    hr {
        border: 0;
        border-top: 1px solid #ccc;
        display: block;
        height: 1px;
        margin: 1em 0;
        padding: 0;
    }

    ins {
        background: #ff9;
        color: #000;
        text-decoration: none;
    }

    mark {
        background: #ff0;
        color: #000;
        font-style: italic;
        font-weight: bold;
    }

    pre {
        font-family: monospace, serif;
        font-size: 1em;
        white-space: pre-wrap;
        white-space: pre;

        .word-wrap(break-word);
    }

    code {
        font-family: monospace, serif;
        font-size: 1em;
    }

    kbd {
        font-family: monospace, serif;
        font-size: 1em;
    }

    samp {
        font-family: monospace, serif;
        font-size: 1em;
    }

    q {
        quotes: none;
    }

    q:before {
        content: "";
        content: none;
    }

    q:after {
        content: "";
        content: none;
    }

    small {
        font-size: 85%;
    }

    sub {
        bottom: -0.25em;
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
    }

    sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        top: -0.5em;
        vertical-align: baseline;
    }

    ul {
        margin: 1em 0;
        padding: 0 0 0 40px;
    }

    ol {
        margin: 1em 0;
        padding: 0 0 0 40px;
    }

    dd {
        margin: 0 0 0 40px;
    }

    nav ul {
        list-style: none;
        list-style-image: none;
        margin: 0;
        padding: 0;
    }

    nav ol {
        list-style: none;
        list-style-image: none;
        margin: 0;
        padding: 0;
    }

    img {
        -ms-interpolation-mode: bicubic;
        border: 0;
        display: inline-block;
        vertical-align: middle;
    }

    svg:not(:root) {
        overflow: hidden;
    }

    form {
        margin: 0;
    }

    fieldset {
        border: 0;
        margin: 0;
        padding: 0;
    }

    label {
        cursor: pointer;
    }

    legend {
        *margin-left: -7px;
        border: 0;
        padding: 0;
    }

    button {
        .appearance(none);

        *overflow: visible;
        *vertical-align: middle;
        cursor: pointer;
        font-size: 100%;
        line-height: normal;
        margin: 0;
        vertical-align: baseline;
    }

    input {
        *vertical-align: middle;
        font-size: 100%;
        line-height: normal;
        margin: 0;
        vertical-align: baseline;
    }

    select {
        *vertical-align: middle;
        font-size: 100%;
        margin: 0;
        vertical-align: baseline;
    }

    textarea {
        *vertical-align: middle;
        font-size: 100%;
        margin: 0;
        vertical-align: baseline;
    }

    input[type="button"], input[type="reset"], input[type="submit"], input[type="text"] {
        .appearance(none);

        *overflow: visible;
    }

    input[type="button"], input[type="reset"], input[type="submit"], {
        cursor: pointer;
    }

    input[type="checkbox"], input[type="radio"] {
        padding: 0;
        cursor: pointer;
    }

    input[type="search"] {
        .appearance(textfield);
    }

    input[type="search"]::-webkit-search-decoration {
        .appearance(none);
    }

    button::-moz-focus-inner {
        border: 0;
        padding: 0;
    }

    input::moz-focus-inner {
        border: 0;
        padding: 0;
    }

    table {
        border-collapse: collapse;
        border-spacing: 0;
    }

    td {
        vertical-align: top;
    }

    p {
        margin: 0;
    }

    span {
        display: inline-block;
    }
}
// Reset Default Browser Style.
.reset() {
    // Resetting HTML and BODY layout.
    html, body {
        .size(100%);
        .font-smoothing;

        margin: 0;
    }

    // Force elements box sizing to border box.
    body * {
        .box-sizing(border-box);
    }

    // Resetting ul that contains class.
    ul[class] {
        .block;

        margin: 0;
        padding: 0;
        list-style: none;
    }

    // Reseting input that has class.
    input[class] {
        .appearance(none);

        &:focus {
            outline: none;
        }
    }

    // Resetting Headings.
    h1, h2, h3, h4, h5, h6 {
        margin: 0;
    }

    // Resetting Anchor.
    a {
        .inline-block;

        text-decoration: none;

        &:focus, &:hover, &:visited {
            outline: none;
        }
    }
}